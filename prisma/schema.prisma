// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// region Account

model Accounts {
  id          String      @id @default(uuid()) @map("Id")
  username    String      @unique @map("Username")
  email       String      @unique @map("Email")
  password    String      @map("Password")
  accountType AccountType @default(USER) @map("AccountType")

  user Users?
  vc   VC?
}

// endregion

// region User

model Users {
  id String @id @unique @map("Id")

  joinedCapitals   UsersJoinedCapitals[]
  investedProjects UsersInvestedProjects[]

  account Accounts @relation(fields: [id], references: [id], onDelete: Cascade)
}

model UsersJoinedCapitals {
  vc   VC     @relation(fields: [vcId], references: [id], onDelete: NoAction)
  vcId String @map("VcId")

  user   Users  @relation(fields: [userId], references: [id], onDelete: NoAction)
  userId String @map("UserId")

  joinedAt DateTime @default(now()) @map("joined_at")

  @@id([userId, vcId])
}

model UsersInvestedProjects {
  id String @default(uuid()) @map("Id")

  user   Users  @relation(fields: [userId], references: [id], onDelete: NoAction)
  userId String @map("UserId")

  project   Projects @relation(fields: [projectId], references: [id], onDelete: NoAction)
  projectId String   @map("ProjectId")

  amount          Decimal  @map("Amount")
  paymentCurrency String   @map("PaymentCurrency")
  paymentNetwork  String   @map("PaymentNetwork")
  fromWalletKey   String   @map("FromWalletKey")
  toWalletKey     String   @map("ToWalletKey")
  investedAt      DateTime @default(now()) @map("invested_at")
  transactionId   String   @map("TransactionId")

  @@id([id, userId, projectId])
}

// endregion

// region VC

model VC {
  id              String   @id @unique @map("Id")
  name            String   @map("Name")
  description     String   @map("Description")
  logoBase64      String   @map("LogoBase64")
  subscriptionFee Decimal  @map("SubscriptionFee")
  tags            String[] @map("Tags")
  kycDone         Boolean  @map("KYCDone")

  account     Accounts              @relation(fields: [id], references: [id], onDelete: Cascade)
  projects    Projects[]
  joinedUsers UsersJoinedCapitals[]

  VCSocial VCSocial @relation(fields: [id], references: [id], onDelete: Cascade, map: "VCSocial_VC_ID")
}

model VCSocial {
  id String @id @unique @map("Id")

  x         String? @map("X")
  instagram String? @map("Instagram")
  discord   String? @map("Discord")
  telegram  String? @map("Telegram")
  medium    String? @map("Medium")
  youtube   String? @map("Youtube")
  linkedin  String? @map("Linkedin")

  VC VC?
}

// endregion

// region Project

model Projects {
  id          String   @id @default(uuid()) @map("Id")
  name        String   @map("Name")
  description String   @map("Description")
  categories  String[] @map("Categories")

  projectTokenMetrics         ProjectTokenMetrics[]
  projectTeamAndAdvisors      ProjectTeamAndAdvisors[]
  projectPartnersAndInvestors ProjectPartnersAndInvestors[]

  projectDeals   ProjectDeals   @relation(fields: [id], references: [id], onDelete: Cascade, map: "ProjectDeals_Project_Id")
  projectSocials ProjectSocials @relation(fields: [id], references: [id], onDelete: Cascade, map: "ProjectSocials_Project_Id")

  VC   VC     @relation(fields: [vcId], references: [id], onDelete: Cascade)
  vcId String @default(uuid()) @map("VCId")

  createdAt DateTime @default(now()) @map("created_at")

  investedUsers UsersInvestedProjects[]
}

model ProjectTokenMetrics {
  id         String       @id @default(uuid()) @map("Id")
  Project    Projects     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  String       @default(uuid()) @map("ProjectId")
  round      ProjectRound @map("Round")
  fdv        String       @map("FDV")
  price      String       @map("Price")
  tgeUnlock  Decimal      @map("TgeUnlock")
  tge        DateTime     @map("TGE")
  tgeSummary String       @map("TgeSummary")
}

model ProjectDeals {
  id             String   @id @unique @map("Id")
  maximum        Decimal  @map("Maximum")
  minimum        Decimal  @map("Minimum")
  acceptedTokens String   @map("AcceptedTokens")
  poolFee        Decimal  @map("PoolFee")
  startDate      DateTime @map("StartDate")
  endDate        DateTime @map("EndDate")

  Projects Projects?
}

model ProjectTeamAndAdvisors {
  id          String   @id @default(uuid()) @map("Id")
  Project     Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String   @default(uuid()) @map("ProjectId")
  name        String   @map("Name")
  title       String   @map("Title")
  description String   @map("Description")
  imgBase64   String?  @map("ImageBase64")
}

model ProjectPartnersAndInvestors {
  id         String   @id @default(uuid()) @map("Id")
  Project    Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  String   @default(uuid()) @map("ProjectId")
  name       String   @map("Name")
  logoBase64 String?  @map("LogoBase64")
}

model ProjectSocials {
  id        String  @id @unique @map("Id")
  x         String? @map("X")
  instagram String? @map("Instagram")
  discord   String? @map("Discord")
  telegram  String? @map("Telegram")
  medium    String? @map("Medium")
  youtube   String? @map("Youtube")

  Projects Projects?
}

// endregion

// region enums

enum AccountType {
  USER
  VC
}

enum ProjectRound {
  PRE_SEED  @map("PRE SEED")
  SEED      @map("SEED")
  PRIVATE_1 @map("PRIVATE 1")
  PRIVATE_2 @map("PRIVATE 2")
  PRIVATE_3 @map("PRIVATE 3")
  PUBLIC    @map("PUBLIC")
}

// endregion
